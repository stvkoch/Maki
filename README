
---------------------------------------------------------------------
    --- Sugar - deploying applications to remote servers ---
---------------------------------------------------------------------


What is it?
  - SUGAR helps us to create, manage and execute deploys task.

What makes?
  - Executes commands on local servers, testing environment and productions servers

How to?
  - first step is to install on your computer
  - Then, at the root of your project to create a file named 'deploy.php'
  - Add tasks to the file 'deploy.php'
  - Execute the commands 'sugar ...'



---------------------------------------------------------------------
                    install
---------------------------------------------------------------------

You need this dependencies:
    - pecl install ssh2 channel://pecl.php.net/ssh2-0.11.3
        pecl ssh2 has dependency:
          - libssh (brew install libssh) or (apt-get install libssh)
          - openssl (brew install openssl) or (apt-get install openssl)



Install Sugar:

 cd ~
 git clone git://github.com/stvkoch/Sugar.git
 sudo ln -s ~/Sugar/bin/sugar /usr/bin/sugar

---------------------------------------------------------------------


Now, you can execute sugar commands on your project. First you need create your tasks on deploy.php file on root of your project.

  cd ~/www/yourproject
  vi deploy.php

Add configs and tasks:
  set('SSH_USERNAME',   'username1' );
  set('SSH_PASSWORD',   'passcrypts1');
  set('SSH_HOST',       'production.hostname.local');
  set('LOCAL_BASE_DIR', '/home/username/www/application');
  set('REMOTE_BASE_DIR','/server/www/application');

  task('deploy', function(){
    message('woow... I ready to deploy my code');
  });
  //test stuffs
  task('test', function(){
    message('testing, testing, 1,2,3...');
    return true;
  });
  //git tasks
  task('git', function(){
    local('cd '. get('LOCAL_BASE_DIR'));
    $message = prompt('Commit message:');
    $diffs = local('git diff');
    local('git add .');
    local("git commit -m '${message}'");
    local('git push');
    //mail('user@address.com','Commit:'.$message, $diff);
  });

OK, you create your basic tasks  deploy.php file, and now you can execute commands


---------------------------------------------------------------------


@example
  #list all task on deploy.php file
  > sugar list
    - deploy
    - test
    - git
  #run task test
  > sugar test
  #show help commands
  > sugar help


You can create hierarchy tasks

  @example hierarchy tasks

  //sugar git (run add, commit and push)
  task('git', 'diff', function(){
    local('cd '. get('LOCAL_BASE_DIR'));
    $message = local('git diff');
    message($message);
    //if you like, send e-mail with diff
  });
  task('git', 'add', function(){
    local('cd '. get('LOCAL_BASE_DIR'));
    local('git add .', true);
  });
  task('git', 'commit', function(){
    local('cd '. get('LOCAL_BASE_DIR'));
    $messageCommit = prompt('Message Commit:');
    local("git commit -m '".$messageCommit."'");
  });
  task('git', 'push', function(){
    local('cd '. get('LOCAL_BASE_DIR'));
    local('git push');
  });


You can run one or all hierarchy tasks

  @example
  > sugar git diff #execute one task
  > sugar git #execute all git tasks (diff, add, commit and push)


---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------


Useful commands used to create tasks within the file deploy.php


@Commands

========================================================
                    Set
========================================================

Set configuration of environment

set($cons, $value, $env='master')



========================================================
                    get
========================================================

Get specific configuration of environment

get($cons, $env='master')




========================================================
                    get_config_env
========================================================

Get configuration of environment

get_config_env($env='master')



========================================================
                    Task
========================================================

Create new task

task()

@example
//create deploy.php on root of your project
  <?
  
  set('SSH_USERNAME', 'username1' );
  set('SSH_PASSWORD', 'passcrypts1');
  set('SSH_HOST',     'production.hostname.local');

  ...

  task('test', 'frontend', function(){
   require_once 'frontendTest.php';
   require_once 'PHPUnit.php';
   $suite  = new PHPUnit_TestSuite("FrontendTest");
   $result = PHPUnit::run($suite);
   if($result ->errorCount()>0){
     message('Errroor you not can deploy', 'red');
   }else{
     sugar('git');
     sugar('deploy');
   }
  });



========================================================
                    remote
========================================================

Execute command on remote computer via SSH

remote($command, $send_output=false)




========================================================
                    local
========================================================

Execute command on local computer

local($command, $send_output=false)




========================================================
                    remote_local
========================================================


Copy recursive file from remote directory to local directory

remote_local($path_remote, $path_local)




========================================================
                    local_remote
========================================================

Copy recursive file from local directory to remote directory

local_remote($path_local, $path_remote)




========================================================
                    sugar
========================================================

Run hierarchy tasks. You can run task inside tasks.


sugar()




========================================================
                    current_environment
========================================================

Add new environment on stack

open_environment($environment)



========================================================
                    current_environment
========================================================

Remove of stack environment

close_environment($environment)




========================================================
                    current_environment
========================================================

Return current environment on stack

$env = current_environment()
$env->name()




========================================================
                    message
========================================================

Show message on terminal

message($message, $fgColor = null, $bgColor = null, $style = null)




========================================================
                    prompt
========================================================

Ready to accept you input

$string = prompt($message, $fgColor = null, $bgColor = null, $style = null)




========================================================
                    configurations
========================================================


  SSH_USERNAME, 
  SSH_PASSWORD, 
  SSH_HOST, 
  SSH_PORT,
  SSH_PUBLIC_KEY, (if set public_key and private_key ssh use this try connect)
  SSH_PRIVATE_KEY,(if set public_key and private_key ssh use this try connect)
  SSH_SECRET (if set public_key and private_key ssh use this try connect)
  
//configuration PATHs
  LOCAL_BASE_DIR, 
  REMOTE_BASE_DIR


Consegues organizar suas configurações por ambientes e executar suas tarefas sobre as configurações de um ambiente espefícico.


@example

set('SSH_USERNAME', 'userprod', 'production');
set('SSH_PASSWORD', 'passprod', 'production');

set('SSH_USERNAME', 'userstag', 'staging');
set('SSH_PASSWORD', 'passstag', 'staging');

task('deploy', function(){
  open_environment('staging');
  remote('git pull');

  open_environment('production');
  remote('git pull'); //run on ssh production
  close_environment('production');

  remote('service restart apache');//on staging environment
  close_environment('staging');
});





Any question

Steven Koch <stvkoch@gmail.com>