{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Maki","tagline":"Maki - Deploy like a NINJA","google":"UA-4676195-12","body":"![Deploy like a NINJA](http://lellol.com/images/ninja32.png)\r\n\r\n### What is it?\r\n  - MAKI helps us to create, manage and execute deploys task.\r\n\r\n### What makes?\r\n  - Executes commands on local servers, testing environment and productions servers\r\n\r\n### How to?\r\n* first step is to install on your computer Maki\r\n* Then, at the root of your project to create a file named 'deploy.php'\r\n* Add tasks to the file 'deploy.php'\r\n* Execute the commands 'maki ...'\r\n\r\n\r\n\r\n***\r\n\r\n@roadmap:\r\n  - implement recursive remote_local function\r\n  - implement recursive local_remote function\r\n\r\n\r\n\r\n## install\r\n\r\n\r\n### dependencies:\r\n    - pecl install ssh2 channel://pecl.php.net/ssh2-0.11.3\r\n        pecl ssh2 has dependency:\r\n          - libssh (brew install libssh) or (apt-get install libssh)\r\n          - openssl (brew install openssl) or (apt-get install openssl)\r\n\r\n\r\n\r\n### Install Maki\r\n\r\n\r\n\r\n    cd ~\r\n    git clone git://github.com/stvkoch/Maki.git\r\n    sudo ln -s ~/Maki/bin/maki /usr/bin/maki\r\n\r\n\r\n\r\n***\r\n\r\n\r\nNow, you can execute maki commands on your project. First you need create your tasks on deploy.php file, create it on root of your project.\r\n\r\n    cd ~/www/yourproject\r\n    vi deploy.php\r\n\r\n\r\nAdd configs and tasks:\r\n\r\n    //this is examples what you can do\r\n    set('SSH_USERNAME',   'username1' );\r\n    set('SSH_PASSWORD',   'passcrypts1');\r\n    set('SSH_HOST',       'production.hostname.local');\r\n\r\n    set('LOCAL_BASE_DIR', '/home/username/www/application');\r\n    set('REMOTE_BASE_DIR','/server/www/application');\r\n    set('FILES_ON_GIT','git://github.com/stvkoch/Maki.git');\r\n\r\n\r\n    task('install', 'webserver01', function(){\r\n      if(prompt('Install now? You are sure??', 'red')=='y'){\r\n        remote('mkdir -p '.get('REMOTE_BASE_DIR'));\r\n        remote('cd '.get('REMOTE_BASE_DIR'));\r\n        remote('git clone '.get('FILES_ON_GIT'));\r\n      }\r\n    });\r\n\r\n    task('install', 'sqlserver01', function(){\r\n      if(prompt('Install SQL now? You are sure??', 'red', 'white')=='y'){\r\n        local('mysqldump -h master_or_dev.sqlserver.domain.ext -u userlocal -p passlocal --databases super_DB > /tmp/current_dump_DB.sql')\r\n        loca_remote('/tmp/current_dump_DB.sql', '/tmp/current_dump_DB.sql');//copy local file to server\r\n        remote('mysql -h '.get('SQL_HOST').' -u usernameSQL -p XPTOPass < /tmp/current_dump_DB.sql');\r\n        remote('cd '.get('REMOTE_BASE_DIR'));\r\n        remote('git clone '.get('FILES_ON_GIT'));\r\n      }\r\n    });\r\n\r\n    task('deploy', function(){\r\n      message('woow... I ready to deploy my code', 'blue');\r\n    });\r\n\r\n    //test stuffs\r\n    task('test', function(){\r\n      message('testing, testing, 1,2,3...', 'white');\r\n      return true;\r\n    });\r\n\r\n    //git tasks\r\n    task('git', function(){\r\n      local('cd '. get('LOCAL_BASE_DIR'));\r\n      $message = prompt('Commit message:','red', 'white');\r\n      $diffs = local('git diff');\r\n      local('git add .');\r\n      local(\"git commit -m '${message}'\");\r\n      local('git push');\r\n      //mail('developers-mail-list@address.com','Commit:'.$message, $diff);\r\n    });\r\n\r\n\r\nOK, you create your basic tasks  deploy.php file, and now you can execute commands\r\n\r\n\r\n\r\n***\r\n\r\n\r\n@example\r\n\r\n\r\nlist all task on deploy.php file\r\n\r\n    ~/www/yourprojectfolder$ maki list\r\n      - deploy\r\n      - test\r\n      - git\r\n\r\n\r\n\r\nrun task test\r\n\r\n    ~/www/yourprojectfolder$ maki test\r\n\r\n\r\nshow help commands\r\n\r\n    ~/www/yourprojectfolder$ maki help\r\n\r\n\r\n\r\n***\r\n\r\n\r\n\r\nYou can create hierarchy tasks\r\n\r\n\r\n@example hierarchy tasks\r\n\r\n    //maki git (run add, commit and push)\r\n    task('git', 'diff', function(){\r\n      local('cd '. get('LOCAL_BASE_DIR'));\r\n      $message = local('git diff');\r\n      message($message);\r\n      //if you like, send e-mail with diff\r\n    });\r\n    task('git', 'add', function(){\r\n      local('cd '. get('LOCAL_BASE_DIR'));\r\n      local('git add .', true);\r\n    });\r\n    task('git', 'commit', function(){\r\n      local('cd '. get('LOCAL_BASE_DIR'));\r\n      $messageCommit = prompt('Message Commit:');\r\n      local(\"git commit -m '\".$messageCommit.\"'\");\r\n    });\r\n    task('git', 'push', function(){\r\n      local('cd '. get('LOCAL_BASE_DIR'));\r\n      local('git push');\r\n    });\r\n\r\n\r\nYou can run one or all hierarchy tasks\r\n\r\n@example\r\n    > maki git diff #execute one task\r\n    > maki git #execute all git tasks (diff, add, commit and push)\r\n\r\n\r\n***\r\n***\r\n\r\n\r\nUseful commands used to create tasks within the file deploy.php\r\n\r\n\r\n\r\n## Commands\r\n\r\n\r\n### set\r\n\r\n\r\nSet configuration of environment\r\n\r\n    set($cons, $value, $env='master')\r\n\r\n\r\n\r\n\r\n### get\r\n\r\n\r\nGet specific configuration of environment\r\n\r\n      get($cons, $env='master')\r\n\r\n\r\n\r\n\r\n\r\n### get_config_env\r\n\r\n\r\nGet configuration of environment\r\n\r\n    get_config_env($env='master')\r\n\r\n\r\n\r\n\r\n### Task\r\n\r\n\r\nCreate new task\r\n\r\n    task()\r\n\r\n@example\r\n\r\n      //create deploy.php on root of your project\r\n      <?\r\n      \r\n      set('SSH_USERNAME', 'username1' );\r\n      set('SSH_PASSWORD', 'passcrypts1');\r\n      set('SSH_HOST',     'production.hostname.local');\r\n\r\n      ...\r\n\r\n      task('test', 'frontend', function(){\r\n       require_once 'frontendTest.php';\r\n       require_once 'PHPUnit.php';\r\n       $suite  = new PHPUnit_TestSuite(\"FrontendTest\");\r\n       $result = PHPUnit::run($suite);\r\n       if($result ->errorCount()>0){\r\n         message('Errroor you not can deploy', 'red');\r\n       }else{\r\n         maki('git');\r\n         maki('deploy');\r\n       }\r\n      });\r\n\r\n\r\n***\r\n\r\n### remote\r\n\r\n\r\nExecute command on remote computer via SSH\r\n\r\n      remote($command, $send_output=false)\r\n\r\n\r\n\r\n\r\n***\r\n### local\r\n\r\n\r\nExecute command on local computer\r\n\r\n      local($command, $send_output=false)\r\n\r\n\r\n\r\n\r\n***\r\n### remote_local\r\n\r\n\r\n\r\nCopy recursive file from remote directory to local directory\r\n\r\n      remote_local($path_remote, $path_local)\r\n\r\n\r\n\r\n\r\n***\r\n### local_remote\r\n\r\n\r\nCopy recursive file from local directory to remote directory\r\n\r\n      local_remote($path_local, $path_remote)\r\n\r\n\r\n\r\n\r\n***\r\n### maki\r\n\r\n\r\nRun hierarchy tasks. You can run task inside tasks.\r\n\r\n\r\n      maki()\r\n\r\n\r\n\r\n@example\r\n\r\n      task('deploy',function(){\r\n        if(maki('test'))\r\n          remote('git pull');\r\n      });\r\n      task('test', function(){\r\n        message('testing,testing, 1,2,3,...');\r\n        return false;//woowww test fail!\r\n      });\r\n\r\n\r\n\r\n***\r\n### open_environment\r\n\r\n\r\nAdd new environment on top of stack. You can have more than one \r\nconfiguration environment, it is these environments that\r\nrun tasks.\r\n\r\n      open_environment($environment)\r\n\r\n\r\n@example\r\n      set('SSH_USERNAME',   'username1', 'production');\r\n      set('SSH_PASSWORD',   'passcrypts1', 'production');\r\n      set('SSH_HOST',       'production.hostname.local', 'production');\r\n\r\n      set('SSH_USERNAME',   'usernamestaging', 'staging');\r\n      set('SSH_PASSWORD',   'passcryptsstaging', 'staging');\r\n      set('SSH_HOST',       'staging.hostname.local', 'staging');\r\n\r\n      task('deploy', 'production', function(){\r\n        open_environment('production');\r\n        remote('cd /path/to/application');\r\n        remote('git pull');\r\n        close_environment();//remove environment of top stack(production), and 'master' environment is available\r\n      });\r\n      task('deploy', 'production', function(){\r\n        open_environment('staging');\r\n        remote('cd /path/to/application');\r\n        remote('git pull');\r\n      });\r\n\r\n\r\n\r\n***\r\n### close_environment\r\n\r\n\r\nRemove environment of stack environments\r\n\r\n      close_environment($environment)\r\n\r\n\r\n\r\n\r\n***\r\n### current_environment\r\n\r\n\r\nReturn top environment on stack\r\n\r\n    $env = current_environment()\r\n    $env->name()\r\n\r\n\r\n\r\n\r\n***\r\n### message\r\n\r\n\r\nShow message on terminal\r\n\r\n      message($message, $fgColor = null, $bgColor = null, $style = null)\r\n\r\n\r\n\r\n\r\n***\r\n### prompt\r\n\r\n\r\nReady to accept your input\r\n\r\n      $string = prompt($message, $fgColor = null, $bgColor = null, $style = null)\r\n\r\n\r\n\r\n\r\n***\r\n### configurations\r\n\r\n\r\n\r\n      SSH_USERNAME, \r\n      SSH_PASSWORD, \r\n      SSH_HOST, \r\n      SSH_PORT,\r\n      SSH_PUBLIC_KEY, (if set public_key and private_key ssh use this try connect)\r\n      SSH_PRIVATE_KEY,(if set public_key and private_key ssh use this try connect)\r\n      SSH_SECRET (if set public_key and private_key ssh use this try connect)\r\n      \r\nPATHs\r\n      LOCAL_BASE_DIR, \r\n      REMOTE_BASE_DIR\r\n\r\n\r\n***\r\n\r\n\r\n\r\nexample\r\n\r\n      set('SSH_USERNAME', 'userprod', 'production');\r\n      set('SSH_PASSWORD', 'passprod', 'production');\r\n\r\n      set('SSH_USERNAME', 'userstag', 'staging');\r\n      set('SSH_PASSWORD', 'passstag', 'staging');\r\n\r\n      task('deploy', function(){\r\n        open_environment('staging');\r\n        remote('git pull');\r\n\r\n        open_environment('production');\r\n        remote('git pull'); //run on ssh production\r\n        close_environment('production');\r\n\r\n        remote('service restart apache');//on staging environment\r\n        close_environment('staging');\r\n      });\r\n\r\n\r\n\r\n\r\nSee exemple file __deploy.php__\r\n\r\n\r\nAny question\r\n\r\nSteven Koch <stvkoch@gmail.com>"}