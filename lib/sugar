#!/usr/bin/php
<?
/**
 * Sugar Ã© uma ferramenta para deploy de aplicativos
 * 
 * @example
 *  sugar --deploy filenamdeploy.php
 * or
 *  cd ~/www/my_app
 *  sugar
 * 
 * 
 * 
 **/
require_once 'sugar.php';

//verify file deploy, bash pass php client.php --deploy __DIR_/deploy.php
if(terminal()->GetArgumentValue('deploy'))
  $deploy_file = terminal()->GetArgumentValue('deploy');
else
  $deploy_file = getcwd().'/deploy.php';

if(!file_exists($deploy_file)){
  terminal()->WriteLine("Not fount deploy file on current directory, please use --deploy fullpath/filenamedeploy",'red');exit(0);
}
$contents = file($deploy_file, FILE_IGNORE_NEW_LINES);
if($contents[0]!='<?'){
  $deploy_file = tempnam(sys_get_temp_dir(), 'deploy');
  file_put_contents($deploy_file, "<?\n\n".implode("\n", $contents));
}
//include your tasks to deploy
include $deploy_file;


//
while (true) {
  $cmd = terminal()->Prompt("Sugar>",'blue');
  $cmd = strtolower($cmd);
  $args=explode(' ', $cmd);
  $cmd = array_shift($args);

  switch (strtok($cmd, ' ')) {
    case 'help':
    case 'commands':
      terminal()->WriteLine("Available commands:");
      terminal()->WriteLine(" * commands          Prints this help");
      terminal()->WriteLine(" * exit          Exits this shell");
      terminal()->WriteLine(" * tasks         List all task on stack");
      terminal()->WriteLine(" * task          Run task");
      terminal()->WriteLine(" * clear         Clear terminal");
      //terminal()->writeLine(" * file          Open file deploy");
      break;
    case 'exit':
      terminal()->WriteLine("Goodbye!");
      exit(0);
    case 'clear':
      terminal()->Clear();
      break;
    case 'list':
    case 'tasks':
      print_tasks(Sugar::$STACK_TASKS);
      break;
    case 'task':
    case 'sugar':
      try {
        $result = call_user_func_array('sugar', $args);
      } catch (TaskNotFountException $e) {
        terminal()->WriteLine("task (".implode(', ', $args).") not found!",'red');
      }
      
      break;
    default:
      if ($cmd != '') terminal()->WriteLine("The command '{$cmd}' is not supported",'red');
  }
}


function print_tasks($stasks, $inc=' - '){
  foreach ($stasks as $key => $stack) {
    terminal()->WriteLine($inc . $key);
    if(is_array($stack)){
        print_tasks($stack, '   '.$inc);
    }
  }
}